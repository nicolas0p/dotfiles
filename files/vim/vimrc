set softtabstop=4
set tabstop=4
set shiftwidth=4
set expandtab
set autoindent
set laststatus=2

set linebreak
set textwidth=500

set smartindent
set wrap "Wrap lines

set mouse=a
set cino+=(0

set incsearch
set ignorecase
set smartcase
set hlsearch

"vim tab completion for files and commands
set wildmenu
set wildmode=longest:full,full

"disable audible bell
set noerrorbells visualbell t_vb=

nmap <silent> ,i gg=G:retab<CR>''

set pastetoggle=<F2>

":colorscheme desert
:colorscheme ron

map <C-K> :ClangFormat<CR>
imap <C-K> <c-o>:ClangFormat<CR>

highligh ExtraWhitespace ctermbg=red
"highligh OverLength ctermbg=DarkMagenta ctermfg=white

" Vim jump to the last position when reopening a file
if has("autocmd")
  au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif
endif

au BufWinEnter * let w:m1=matchadd('ExtraWhitespace', '\s\+$', -1)

"au BufWinEnter * let w:m2=matchadd('OverLength', '\%81v.\+', -1)

set autochdir
set tags=./tags;~/workspace

syntax on

" vundle setup
filetype off

set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

Plugin 'gmarik/Vundle.vim'
Plugin 'vim-syntastic/syntastic'
Plugin 'neoclide/coc.nvim'
Plugin 'yegappan/lid'
Plugin 'yegappan/taglist'
"Plugin 'bling/vim-airline'
"Plugin 'tpope/vim-fugitive'
"Plugin 'kana/vim-operator-user'
"Plugin 'davidhalter/jedi-vim'
"
"Plugin 'Valloric/YouCompleteMe'
"Plugin 'rhysd/vim-clang-format'
"
"Plugin 'rust-lang/rust.vim'
"Plugin 'prabirshrestha/async.vim'
"Plugin 'prabirshrestha/vim-lsp'
"Plugin 'prabirshrestha/asyncomplete.vim'
"Plugin 'prabirshrestha/asyncomplete-lsp.vim'
call vundle#end()

filetype plugin indent on

"Syntastic options
let g:syntastic_py_checkers = ["python3"]
let g:syntastic_check_on_open = 1

"YouCompleteMe options
let g:ycm_autoclose_preview_window_after_insertion = 1

"clang-format
autocmd FileType c ClangFormatAutoEnable

let g:clang_format#code_style = "llvm"
let g:clang_format#style_options = {
    \ "TabWidth" : 4,
    \ "UseTab" : "Never"}

" TagList options
let Tlist_Close_On_Select = 1 "close taglist window once we selected something
let Tlist_Exit_OnlyWindow = 1 "if taglist window is the only window left, exit vim
let Tlist_Show_Menu = 1 "show Tags menu in gvim
let Tlist_Show_One_File = 1 "show tags of only one file
let Tlist_GainFocus_On_ToggleOpen = 1 "automatically switch to taglist window
let Tlist_Highlight_Tag_On_BufEnter = 1 "highlight current tag in taglist window
let Tlist_Process_File_Always = 1 "even without taglist window, create tags file, required for displaying tag in statusline
let Tlist_Use_Right_Window = 1 "display taglist window on the right
let Tlist_Display_Prototype = 1 "display full prototype instead of just function name
"let Tlist_Ctags_Cmd = /usr/bin/ctags

nnoremap <F5> :TlistToggle<cr>:vertical resize 80<cr>
nnoremap <F6> :TlistShowPrototype<cr>

"display tag on the status line
set statusline=[%n]\ %<%f\ %([%1*%M%*%R%Y]%)\ \ \ [%{exists('*Tlist_Get_Tagname_By_line')?Tlist_Get_Tagname_By_line():''}]\ %=%-19(\LINE\ [%l/%L]\ COL\ [%02c%03V]%)\ %P

"----coc.nvim config
" give more space for displaying messages.
set cmdheight=1

" Having longer updatetime (default is 4000 ms = 4 s) leads to noticeable
" delays and poor user experience.
set updatetime=300

" Don't pass messages to |ins-completion-menu|.
set shortmess+=c

" Always show the signcolumn, otherwise it would shift the text each time
" diagnostics appear/become resolved.
set signcolumn=number

" Use tab for trigger completion with characters ahead and navigate.
" NOTE: Use command ':verbose imap <tab>' to make sure tab is not mapped by
" other plugin before putting this into your config.
inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Use <c-space> to trigger completion.
inoremap <silent><expr> <c-@> coc#refresh()

" Use <cr> to confirm completion, `<C-g>u` means break undo chain at current
" position. Coc only does snippet and additional edit on confirm.
" <cr> could be remapped by other vim plugin, try `:verbose imap <CR>`.
if exists('*complete_info')
  inoremap <expr> <cr> complete_info()["selected"] != "-1" ? "\<C-y>" : "\<C-g>u\<CR>"
else
  inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"
endif

" Use `[g` and `]g` to navigate diagnostics
" Use `:CocDiagnostics` to get all diagnostics of current buffer in location list.
nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)

" GoTo code navigation.
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Use K to show documentation in preview window.
nnoremap <silent> K :call <SID>show_documentation()<CR>

function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  else
    call CocAction('doHover')
  endif
endfunction

" Highlight the symbol and its references when holding the cursor.
autocmd CursorHold * silent call CocActionAsync('highlight')

" Symbol renaming.
nmap <leader>rn <Plug>(coc-rename)

" Formatting selected code.
xmap <leader>f  <Plug>(coc-format-selected)
nmap <leader>f  <Plug>(coc-format-selected)

function! s:insert_gates()
	let gatename = substitute(toupper(expand("%:t")), "\\.", "_", "g")
	execute "normal! i#ifndef " . gatename
	execute "normal! o#define " . gatename
	execute "normal! Go#endif /* " . gatename . " */"
	normal! kk
endfunction
autocmd BufNewFile *.{h,hpp} call <SID>insert_gates()

"rust
if executable('rls')
    au User lsp_setup call lsp#register_server({
        \ 'name': 'rls',
        \ 'cmd': {server_info->['rustup', 'run', 'nighly', 'rls']},
        \ 'whitelist': ['rust'],
        \ {)
endif

